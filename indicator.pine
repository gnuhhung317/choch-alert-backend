//@version=5
indicator("Pivot Waves + 8-Pattern + CHoCH (upfate ver.)", overlay=true, max_lines_count=500, max_labels_count=500)

// ========== Inputs ==========
left        = input.int(1,  "Pivot Left",  minval=1)
right       = input.int(1,  "Pivot Right", minval=1)
drawWaves   = input.bool(true, "Vẽ sóng (nối line giữa các pivot)")
useBodyBreak= input.bool(true, "CHoCH theo thân nến (close)")
touchTicks  = input.int(2, "Độ dung sai 'chạm' (số tick)", minval=0)
keepPivots  = input.int(200, "Số pivot tối đa lưu", minval=20)
plotPvtMark = input.bool(true, "Hiển thị PH/PL")
plotEightLbl = input.bool(true, "Ghi nhãn P1..P8 gần nhất")
showTable   = input.bool(true, "Bảng thông tin")

// --- Variant filters (BẮT BUỘC - chỉ detect pivot có variant hợp lệ)
allowPH1 = input.bool(true,  "Cho phép PH loại 1")
allowPH2 = input.bool(true,  "Cho phép PH loại 2 (con là nến #1)")
allowPH3 = input.bool(true,  "Cho phép PH loại 3 (biến thể khác)")
allowPL1 = input.bool(true,  "Cho phép PL loại 1")
allowPL2 = input.bool(true,  "Cho phép PL loại 2 (con là nến #1)")
allowPL3 = input.bool(true,  "Cho phép PL loại 3 (biến thể khác)")
showVariantLabel = input.bool(false, "Hiển thị mã biến thể trên chart")

var bool chochLocked = false 

// ========== Storage ==========
var prices = array.new_float()
var bars   = array.new_int()
var highs  = array.new_bool()

storePivot(_bar, _price, _isHigh) =>
    array.push(bars,   _bar)
    array.push(prices, _price)
    array.push(highs,  _isHigh)
    while array.size(bars) > keepPivots
        array.shift(bars)
        array.shift(prices)
        array.shift(highs)

pCount() => array.size(prices)

getPivotFromEnd(idxFromEnd) =>
    sz = array.size(prices)
    [ array.get(bars,   sz-1-idxFromEnd),
      array.get(prices, sz-1-idxFromEnd),
      array.get(highs,  sz-1-idxFromEnd) ]

// Dung sai tick
tol = syminfo.mintick * touchTicks

// ========== Helpers cho phân loại biến thể ==========
getHLTripletAroundMid() =>
    // Timeline: [LEFT/h3] → [CENTER/h2/PIVOT] → [RIGHT/h1]
    // Pine indexing: [right+1] → [right] → [right-1]
    float h2 = high[right]      // CENTER (pivot bar)
    float l2 = low[right]
    float h3 = na               // LEFT side
    float l3 = na
    float h1 = na               // RIGHT side
    float l1 = na
    
    if bar_index > right + 1
        h3 := high[right + 1]   // LEFT side
        l3 := low[right + 1]
    if right - 1 >= 0
        h1 := high[right - 1]   // RIGHT side
        l1 := low[right - 1]
    [h1,h2,h3,l1,l2,l3]

isPH_type1() =>
    [h1,h2,h3,l1,l2,l3] = getHLTripletAroundMid()
    not na(h1) and not na(h3) and (h2 > h1 and h2 > h3) and (l2 > l1 and l2 > l3)

isPH_type2() =>
    [h1,h2,h3,l1,l2,l3] = getHLTripletAroundMid()
    not na(h1) and not na(h3) and (h2 >= h1 and h2 > h3) and (l2 > l3 and l2 < l1)

isPH_type3() =>
    [h1,h2,h3,l1,l2,l3] = getHLTripletAroundMid()
    not na(h1) and not na(h3) and (h2 > h1 and h2 >= h3) and (l2 < l3 and l2 > l1)

isPL_type1() =>
    [h1,h2,h3,l1,l2,l3] = getHLTripletAroundMid()
    not na(h1) and not na(h3) and (l2 < l1 and l2 < l3) and (h2 < h1 and h2 < h3)

isPL_type2() =>
    [h1,h2,h3,l1,l2,l3] = getHLTripletAroundMid()
    not na(h1) and not na(h3) and (h2 >= h1 and h2 < h3) and (l2 < l3 and l2 <= l1)

isPL_type3() =>
    [h1,h2,h3,l1,l2,l3] = getHLTripletAroundMid()
    not na(h1) and not na(h3) and (l2 < l1 and l2 < l3) and (h2 < h1 and h2 > h3)

classifyPivotVariant(isHighPivot) =>
    var string t = "NA"
    if isHighPivot
        t := isPH_type1() ? "PH1" :
             isPH_type2() ? "PH2" :
             isPH_type3() ? "PH3" : "NA"
    else
        t := isPL_type1() ? "PL1" :
             isPL_type2() ? "PL2" :
             isPL_type3() ? "PL3" : "NA"
    t

allowedByUser(t) =>
    switch t
        "PH1" => allowPH1
        "PH2" => allowPH2
        "PH3" => allowPH3
        "PL1" => allowPL1
        "PL2" => allowPL2
        "PL3" => allowPL3
        => false

// ========== Custom Pivot Detection (không dùng ta.pivot*) ==========
// Detect pivot manually based on variant classification only
var bool isPH = false
var bool isPL = false
var float newPivotPrice = na
var int newPivotBar = na
var bool newPivotHigh = false

// Reset detection flags
isPH := false
isPL := false
newPivotPrice := na
newPivotBar := na

// Chỉ check khi có đủ bars 2 bên
if bar_index > right + 1 and right - 1 >= 0
    // Check Pivot High variants
    if isPH_type1() and allowPH1
        isPH := true
    else if isPH_type2() and allowPH2
        isPH := true
    else if isPH_type3() and allowPH3
        isPH := true
    
    // Check Pivot Low variants
    if isPL_type1() and allowPL1
        isPL := true
    else if isPL_type2() and allowPL2
        isPL := true
    else if isPL_type3() and allowPL3
        isPL := true
    
    // Set pivot data if detected
    if isPH
        newPivotPrice := high[right]
        newPivotBar := bar_index - right
        newPivotHigh := true
    else if isPL
        newPivotPrice := low[right]
        newPivotBar := bar_index - right
        newPivotHigh := false

// ========== State vars ==========
var int   lastPivotBar   = na
var float lastPivotPrice = na
var bool  lastEightUp    = false
var bool  lastEightDown  = false
var int   lastEightBarIdx = na
var float p2_price       = na
var bool  acceptedPH_event = false
var bool  acceptedPL_event = false

// ========== Khi có pivot mới ==========
acceptedPH_event := false
acceptedPL_event := false

if (isPH or isPL)
    // ========== BẮT BUỘC lọc theo variant - KHÔNG detect pivot thuần ==========
    tvar = classifyPivotVariant(isPH)
    accept = (tvar != "NA") and allowedByUser(tvar)

    if accept
        // --- chèn pivot giả nếu 2 pivot liên tiếp cùng loại (giữ nguyên cơ chế của bạn) ---
        if pCount() > 0
            [lastBar, lastPrice, lastHigh] = getPivotFromEnd(0)
            newHigh = isPH
            if lastHigh == newHigh
                gap = newPivotBar - lastBar - 1
                if gap > 0
                    firstBarInGap = lastBar + 1
                    lastBarInGap  = newPivotBar - 1
                    offsetFirst   = bar_index - firstBarInGap
                    offsetLast    = bar_index - lastBarInGap
                    if offsetFirst >= 0 and offsetLast >= 0
                        float insertPrice = newHigh ? low[offsetFirst] : high[offsetFirst]
                        int   insertBar   = firstBarInGap
                        bool  insertHigh  = not newHigh
                        for i = offsetFirst to offsetLast
                            float candidate = newHigh ? low[i] : high[i]
                            if (newHigh and candidate < insertPrice) or (not newHigh and candidate > insertPrice)
                                insertPrice := candidate
                                insertBar   := bar_index - i
                        if insertBar > lastBar and insertBar < newPivotBar
                            storePivot(insertBar, insertPrice, insertHigh)
                            if drawWaves and not na(lastPivotBar)
                                line.new(lastPivotBar, lastPivotPrice, insertBar, insertPrice, color=color.new(color.blue, 0), width=2)
                            lastPivotBar   := insertBar
                            lastPivotPrice := insertPrice

        // Lưu pivot mới
        storePivot(newPivotBar, newPivotPrice, newPivotHigh)
        if drawWaves and not na(lastPivotBar)
            line.new(lastPivotBar, lastPivotPrice, newPivotBar, newPivotPrice, color=color.new(color.blue, 0), width=2)
        lastPivotBar   := newPivotBar
        lastPivotPrice := newPivotPrice

        // reset khóa CHoCH khi đã hình thành pivot sau cụm 8 trước đó
        if not na(lastEightBarIdx) and newPivotBar > lastEightBarIdx
            chochLocked := false

        acceptedPH_event := isPH
        acceptedPL_event := isPL

        if showVariantLabel and tvar != "NA"
            label.new(newPivotBar, newPivotPrice, tvar, style=label.style_label_center,
                      textcolor=color.white, color=color.new(color.black, 10), size=size.tiny)

// ========== 8-Pattern ==========
var float pivot6 = na   // p6 (reference cho CHoCH)
var float pivot5 = na   // p5 (additional reference cho CHoCH)
eightReady = pCount() >= 8
if eightReady
    [b8,p8,h8] = getPivotFromEnd(0)
    [b7,p7,h7] = getPivotFromEnd(1)
    [b6,p6,h6] = getPivotFromEnd(2)
    [b5,p5,h5] = getPivotFromEnd(3)
    [b4,p4,h4] = getPivotFromEnd(4)
    [b3,p3,h3] = getPivotFromEnd(5)
    [b2,p2,h2] = getPivotFromEnd(6)
    [b1,p1,h1] = getPivotFromEnd(7)

    // cấu trúc xen kẽ 8 pivot
    upStruct   = (not h1) and h2 and (not h3) and h4 and (not h5) and h6 and (not h7) and h8
    downStruct = h1 and (not h2) and h3 and (not h4) and h5 and (not h6) and h7 and (not h8)

    // Retest P7 ↔ P4 (thay vì P5 ↔ P2)
    off7 = math.max(0, bar_index - b7)
    off4 = math.max(0, bar_index - b4)
    hi7 = high[off7]
    lo7 = low[off7]
    hi4 = high[off4]
    lo4 = low[off4]
    touchRetest = (upStruct and (lo7 < hi4)) or (downStruct and (hi7 > lo4))

    // P8 là cực trị trong cụm 1–8
    highsArr  = array.from(p1, p2, p3, p4, p5, p6, p7, p8)
    lowsArr   = array.from(p1, p2, p3, p4, p5, p6, p7, p8)
    isHighest8 = p8 == array.max(highsArr)
    isLowest8  = p8 == array.min(lowsArr)

    // Ràng buộc thứ tự 8-pivot
    upOrderOK   = (p2 < p4 and p4 < p6 and p6 < p8) and ( p3 < p5 and p5 < p7)
    downOrderOK = ( p3 > p5 and p5 > p7) and (p2 > p4 and p4 > p6 and p6 > p8)

    // Điều kiện breakout mới
    off5 = math.max(0, bar_index - b5)
    off3 = math.max(0, bar_index - b3)
    off2 = math.max(0, bar_index - b2)
    off1 = math.max(0, bar_index - b1)
    
    lo5 = low[off5]
    hi2 = high[off2]
    lo3 = low[off3]
    lo1 = low[off1]
    hi5 = high[off5]
    lo2 = low[off2]
    hi3 = high[off3]
    hi1 = high[off1]
    
    upBreakout   = (lo5 > hi2) 
    downBreakout = (hi5 < lo2) 

    // Mẫu hợp lệ với điều kiện breakout phù hợp
    // Uptrend pattern + UP breakout conditions
    lastEightUp   := upStruct   and upOrderOK   and touchRetest and isHighest8 and upBreakout
    // Downtrend pattern + DOWN breakout conditions
    lastEightDown := downStruct and downOrderOK and touchRetest and isLowest8  and downBreakout

    // Lưu p5 và p6 khi mẫu hợp lệ
    if (lastEightDown or lastEightUp)
        pivot5 := p5
        pivot6 := p6

    lastEightBarIdx := b8
    p2_price        := p2

// ---- Sau khi đã có eightReady ----
isAfterEight = eightReady and (bar_index > nz(lastEightBarIdx))

var bool fireChochUp = false
var bool fireChochDn = false

if eightReady and not na(pivot6) and not na(pivot5)
    // ========== 3-CANDLE CHoCH CONFIRMATION (matching Python logic) ==========
    // Pre-CHoCH [2] → CHoCH Bar [1] → Confirmation [0]
    
    // CHoCH Bar conditions (nến [1] - previous bar)
    // CHoCH Up: low[1] > low[2] AND close[1] > high[2] AND close[1] > pivot6 AND close[1] < pivot5
    chochUpBar = (low[1] > low[2]) and (close[1] > high[2]) and 
                 (close[1] > pivot6) and (close[1] < pivot5)
    
    // CHoCH Down: high[1] < high[2] AND close[1] < low[2] AND close[1] < pivot6 AND close[1] > pivot5
    chochDownBar = (high[1] < high[2]) and (close[1] < low[2]) and 
                   (close[1] < pivot6) and (close[1] > pivot5)

    // Confirmation conditions (nến [0] - current bar)
    // CHoCH Up confirmed: current low > high của nến pre-CHoCH [2]
    confirmUp = (low > high[2])
    
    // CHoCH Down confirmed: current high < low của nến pre-CHoCH [2]
    confirmDown = (high < low[2])

    // Match with pattern direction
    baseUp   = isAfterEight and lastEightDown and chochUpBar and confirmUp
    baseDown = isAfterEight and lastEightUp   and chochDownBar and confirmDown

    // Fire signal với locking
    fireChochUp := (not chochLocked) and baseUp
    fireChochDn := (not chochLocked) and baseDown

    if fireChochUp or fireChochDn
        chochLocked := true

// ========== Plot ==========
plotshape(fireChochUp,  title="CHoCH Up",   style=shape.labelup,   text="CH↑",
          color=color.new(color.teal, 0),   textcolor=color.white, location=location.belowbar, size=size.tiny)
plotshape(fireChochDn,  title="CHoCH Down", style=shape.labeldown, text="CH↓",
          color=color.new(color.orange, 0), textcolor=color.white, location=location.abovebar, size=size.tiny)
